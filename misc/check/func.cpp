// check.cpp : アプリケーションのエントリ ポイントを定義します。
//
#include "stdafx.h"
#include "check.h"
#include "../func.h"


/*! UNICODEとANSIの相互変換
*/
TEST(func,a2w)
{
	const std::wstring r = lui::a2w("ANSIからwchar_tへの変換");
	EXPECT_EQ( L"ANSIからwchar_tへの変換", r );
}

TEST(func,w2a)
{
	const std::string r = lui::w2a(L"wchar_tからANSIへの変換");
	EXPECT_EQ( "wchar_tからANSIへの変換", r );
}	

TEST(func,a2w_long)
{
	std::wstring r;
	ASSERT_NO_THROW( r = lui::a2w(
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
    ));
    EXPECT_EQ(
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い",
        r
    );
}

TEST(func,w2a_long)
{
	std::string r;
	ASSERT_NO_THROW( r = lui::w2a(
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        L"長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
    ));
    EXPECT_EQ(
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い"
        "長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い",
        r
    );
}


TEST(func,u2w)
{
	const std::wstring r = lui::u2w(
#if __cplusplus > 199711L
		u8"UTF-8からwchar_tへの変換" // C++11以降
#else
		"UTF-8\xE3\x81\x8B\xE3\x82\x89wchar_t\xE3\x81\xB8\xE3\x81\xAE\xE5\xA4\x89\xE6\x8F\x9B"
#endif
	);
	EXPECT_EQ( L"UTF-8からwchar_tへの変換", r );
}	

TEST(func,w2u)
{
	const std::string r = lui::w2u(L"wchar_tからUTF-8への変換");
	const char* except = 
#if __cplusplus > 199711L
		u8"wchar_tからUTF-8への変換" // C++11以降
#else
		"wchar_t\xE3\x81\x8B\xE3\x82\x89UTF-8\xE3\x81\xB8\xE3\x81\xAE\xE5\xA4\x89\xE6\x8F\x9B"
#endif
	;
	EXPECT_EQ( except,r );
}

TEST(func,encodeString)
{
	const std::string org = "abcdEFGH1234.+;$%&'~";
	EXPECT_EQ( org, lui::encodeString(org) );

	EXPECT_EQ( "%82%A0%82%A2%82%A4%82%A6%82%A8%8A%BF%8E%9A%CA%DD%B6%B8", lui::encodeString( std::string("あいうえお漢字ﾊﾝｶｸ") ) );
}
